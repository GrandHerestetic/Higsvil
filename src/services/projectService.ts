import { 
  collection, 
  addDoc, 
  updateDoc, 
  deleteDoc, 
  doc, 
  getDocs, 
  query, 
  where, 
  serverTimestamp,
  Timestamp 
} from 'firebase/firestore';
import { ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';
import { db, storage } from '../config/firebase';

export interface Project {
  id?: string;
  name: string;
  duration: string;
  videoUrl: string;
  thumbnailUrl?: string;
  userId: string;
  createdAt: Timestamp | Date;
  updatedAt: Timestamp | Date;
}

const PROJECTS_COLLECTION = 'projects';

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
export const createProject = async (
  projectData: Omit<Project, 'id' | 'createdAt' | 'updatedAt'>,
  videoFile: File,
  thumbnailBlob?: Blob
): Promise<string> => {
  try {
    console.log('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ...', videoFile.name);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const timestamp = Date.now();
    const sanitizedFileName = videoFile.name.replace(/[^a-zA-Z0-9.-]/g, '_');
    const videoPath = `videos/${projectData.userId}/${timestamp}_${sanitizedFileName}`;
    
    console.log('–ü—É—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:', videoPath);
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –≤ Storage
    const videoRef = ref(storage, videoPath);
    const uploadResult = await uploadBytes(videoRef, videoFile);
    
    console.log('–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:', uploadResult.metadata.fullPath);
    
    // –ü–æ–ª—É—á–∞–µ–º URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    const videoUrl = await getDownloadURL(uploadResult.ref);
    console.log('URL –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω:', videoUrl);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    let thumbnailUrl = '';
    if (thumbnailBlob) {
      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã...');
      const thumbnailPath = `thumbnails/${projectData.userId}/${timestamp}_thumbnail.jpg`;
      const thumbnailRef = ref(storage, thumbnailPath);
      const thumbnailUploadResult = await uploadBytes(thumbnailRef, thumbnailBlob);
      thumbnailUrl = await getDownloadURL(thumbnailUploadResult.ref);
      console.log('–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', thumbnailUrl);
    }

    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ Firestore...');
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ Firestore
    const docRef = await addDoc(collection(db, PROJECTS_COLLECTION), {
      ...projectData,
      videoUrl,
      thumbnailUrl,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp()
    });

    console.log('–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID:', docRef.id);
    return docRef.id;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
    console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
    console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    
    if (error.code === 'storage/unauthorized') {
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Storage. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.');
    } else if (error.code === 'storage/canceled') {
      throw new Error('–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    } else if (error.code === 'storage/unknown') {
      throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Storage. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Storage —Å–æ–∑–¥–∞–Ω –≤ Firebase Console.');
    }
    
    throw error;
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserProjects = async (userId: string): Promise<Project[]> => {
  try {
    const q = query(
      collection(db, PROJECTS_COLLECTION),
      where('userId', '==', userId)
      // orderBy —É–±—Ä–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª—Å—è –∏–Ω–¥–µ–∫—Å
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    );

    const querySnapshot = await getDocs(q);
    const projects: Project[] = [];

    querySnapshot.forEach((doc) => {
      projects.push({
        id: doc.id,
        ...doc.data()
      } as Project);
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    return projects.sort((a, b) => {
      const aTime = a.createdAt instanceof Date ? a.createdAt.getTime() : (a.createdAt as any).toMillis();
      const bTime = b.createdAt instanceof Date ? b.createdAt.getTime() : (b.createdAt as any).toMillis();
      return bTime - aTime;
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', error);
    if (error.code === 'permission-denied') {
      console.error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Firestore.');
    } else if (error.code === 'failed-precondition') {
      console.error('Firestore –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ Firebase Console.');
    }
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏
    return [];
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã (–¥–ª—è –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞)
export const getAllProjects = async (): Promise<Project[]> => {
  try {
    const q = query(
      collection(db, PROJECTS_COLLECTION)
      // orderBy —É–±—Ä–∞–Ω, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    );

    const querySnapshot = await getDocs(q);
    const projects: Project[] = [];

    querySnapshot.forEach((doc) => {
      projects.push({
        id: doc.id,
        ...doc.data()
      } as Project);
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    return projects.sort((a, b) => {
      const aTime = a.createdAt instanceof Date ? a.createdAt.getTime() : (a.createdAt as any).toMillis();
      const bTime = b.createdAt instanceof Date ? b.createdAt.getTime() : (b.createdAt as any).toMillis();
      return bTime - aTime;
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', error);
    throw error;
  }
};

// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
export const updateProject = async (
  projectId: string,
  updates: Partial<Omit<Project, 'id' | 'createdAt' | 'updatedAt'>>
): Promise<void> => {
  try {
    const projectRef = doc(db, PROJECTS_COLLECTION, projectId);
    await updateDoc(projectRef, {
      ...updates,
      updatedAt: serverTimestamp()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
    throw error;
  }
};

// –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
export const deleteProject = async (projectId: string, videoUrl: string, thumbnailUrl?: string): Promise<void> => {
  try {
    // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ Storage
    if (videoUrl) {
      const videoRef = ref(storage, videoUrl);
      await deleteObject(videoRef).catch(err => console.warn('–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', err));
    }

    if (thumbnailUrl) {
      const thumbnailRef = ref(storage, thumbnailUrl);
      await deleteObject(thumbnailRef).catch(err => console.warn('–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', err));
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ Firestore
    const projectRef = doc(db, PROJECTS_COLLECTION, projectId);
    await deleteDoc(projectRef);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
    throw error;
  }
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã –∏–∑ –≤–∏–¥–µ–æ
export const generateThumbnail = (videoElement: HTMLVideoElement): Promise<Blob> => {
  return new Promise((resolve, reject) => {
    try {
      const canvas = document.createElement('canvas');
      canvas.width = 400;
      canvas.height = 225;

      const ctx = canvas.getContext('2d');
      if (!ctx) {
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç canvas'));
        return;
      }

      ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);

      canvas.toBlob((blob) => {
        if (blob) {
          resolve(blob);
        } else {
          reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—É'));
        }
      }, 'image/jpeg', 0.8);
    } catch (error) {
      reject(error);
    }
  });
};

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è base64 –≤ Blob
export const base64ToBlob = (base64: string): Blob => {
  const base64Data = base64.split(',')[1];
  const byteCharacters = atob(base64Data);
  const byteNumbers = new Array(byteCharacters.length);
  
  for (let i = 0; i < byteCharacters.length; i++) {
    byteNumbers[i] = byteCharacters.charCodeAt(i);
  }
  
  const byteArray = new Uint8Array(byteNumbers);
  return new Blob([byteArray], { type: 'image/jpeg' });
};

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Storage –∏ –ø–æ–ª—É—á–∏—Ç—å URL
export const uploadImageToStorage = async (
  imageBase64: string,
  userId: string,
  imageName: string
): Promise<string> => {
  try {
    console.log(`üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${imageName} –≤ Storage...`);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ blob
    const blob = base64ToBlob(imageBase64);
    
    // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –≤ Storage
    const timestamp = Date.now();
    const imagePath = `frames/${userId}/${timestamp}_${imageName}.jpg`;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage
    const imageRef = ref(storage, imagePath);
    const uploadResult = await uploadBytes(imageRef, blob);
    
    // –ü–æ–ª—É—á–∞–µ–º URL
    const imageUrl = await getDownloadURL(uploadResult.ref);
    console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${imageUrl}`);
    
    return imageUrl;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    throw error;
  }
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã –∏–∑ –∫–∞–¥—Ä–∞ —Ä–∞—Å–∫–∞–¥—Ä–æ–≤–∫–∏ (base64)
export const generateThumbnailFromFrame = (frameBase64: string): Promise<Blob> => {
  return new Promise((resolve, reject) => {
    try {
      const canvas = document.createElement('canvas');
      canvas.width = 400;
      canvas.height = 225;

      const ctx = canvas.getContext('2d');
      if (!ctx) {
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç canvas'));
        return;
      }

      const img = new Image();
      img.onload = () => {
        try {
          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
          
          canvas.toBlob((blob) => {
            if (blob) {
              resolve(blob);
            } else {
              reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—É –∏–∑ –∫–∞–¥—Ä–∞'));
            }
          }, 'image/jpeg', 0.8);
        } catch (error) {
          reject(error);
        }
      };
      
      img.onerror = () => {
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–¥—Ä–∞'));
      };
      
      img.src = frameBase64;
    } catch (error) {
      reject(error);
    }
  });
};

